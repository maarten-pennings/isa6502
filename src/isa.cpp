// isa.cpp - 6502 instruction set architecture
// This file is generated by isa6502.py V3 on 2020-05-23 22:53:42


#include <avr/pgmspace.h>
#include <ctype.h>
#include "isa.h"


// Reading from flash (PROGMEM) needs special instructions
// https://www.nongnu.org/avr-libc/user-manual/group__avr__pgmspace.html
// Recall that F(xxx) puts literal xxx in PROGMEM and makes it printable.
// The macro f(xxx) assumes pointer xxx is already in PROGMEM but it makes it printable.
#define f(s) ((__FlashStringHelper *)(s))
// Recall pgm_read_word(addr) is needed to read a word (pointer) from address addr in progmem
// Recall pgm_read_byte(addr) is needed to read a byte (uint8/char) from address addr in progmem


// ADDRMODES #####################################################
// All addressing mode strings are mapped to PROGRMEM
const char ISA_AIX_0Ea_aname [] /* 0*/ PROGMEM = "0Ea";
const char ISA_AIX_0Ea_desc  [] /* 0*/ PROGMEM = "?Error description";
const char ISA_AIX_0Ea_syntax[] /* 0*/ PROGMEM = "??? syntax";
const char ISA_AIX_ABS_aname [] /* 1*/ PROGMEM = "ABS";
const char ISA_AIX_ABS_desc  [] /* 1*/ PROGMEM = "Absolute";
const char ISA_AIX_ABS_syntax[] /* 1*/ PROGMEM = "OPC HHLL";
const char ISA_AIX_ABX_aname [] /* 2*/ PROGMEM = "ABX";
const char ISA_AIX_ABX_desc  [] /* 2*/ PROGMEM = "Absolute, indexed with x";
const char ISA_AIX_ABX_syntax[] /* 2*/ PROGMEM = "OPC HHLL,X";
const char ISA_AIX_ABY_aname [] /* 3*/ PROGMEM = "ABY";
const char ISA_AIX_ABY_desc  [] /* 3*/ PROGMEM = "Absolute, indexed with y";
const char ISA_AIX_ABY_syntax[] /* 3*/ PROGMEM = "OPC HHLL,Y";
const char ISA_AIX_ACC_aname [] /* 4*/ PROGMEM = "ACC";
const char ISA_AIX_ACC_desc  [] /* 4*/ PROGMEM = "Accumulator";
const char ISA_AIX_ACC_syntax[] /* 4*/ PROGMEM = "OPC A";
const char ISA_AIX_IMM_aname [] /* 5*/ PROGMEM = "IMM";
const char ISA_AIX_IMM_desc  [] /* 5*/ PROGMEM = "Immediate";
const char ISA_AIX_IMM_syntax[] /* 5*/ PROGMEM = "OPC #NN";
const char ISA_AIX_IMP_aname [] /* 6*/ PROGMEM = "IMP";
const char ISA_AIX_IMP_desc  [] /* 6*/ PROGMEM = "Implied";
const char ISA_AIX_IMP_syntax[] /* 6*/ PROGMEM = "OPC";
const char ISA_AIX_IND_aname [] /* 7*/ PROGMEM = "IND";
const char ISA_AIX_IND_desc  [] /* 7*/ PROGMEM = "Indirect";
const char ISA_AIX_IND_syntax[] /* 7*/ PROGMEM = "OPC (HHLL)";
const char ISA_AIX_INX_aname [] /* 8*/ PROGMEM = "INX";
const char ISA_AIX_INX_desc  [] /* 8*/ PROGMEM = "Zero page, indexed with x, indirect";
const char ISA_AIX_INX_syntax[] /* 8*/ PROGMEM = "OPC (LL,X)";
const char ISA_AIX_INY_aname [] /* 9*/ PROGMEM = "INY";
const char ISA_AIX_INY_desc  [] /* 9*/ PROGMEM = "Zero page, indirect, indexed with y";
const char ISA_AIX_INY_syntax[] /* 9*/ PROGMEM = "OPC (LL),Y";
const char ISA_AIX_REL_aname [] /*10*/ PROGMEM = "REL";
const char ISA_AIX_REL_desc  [] /*10*/ PROGMEM = "Relative to PC";
const char ISA_AIX_REL_syntax[] /*10*/ PROGMEM = "OPC NN";
const char ISA_AIX_ZPG_aname [] /*11*/ PROGMEM = "ZPG";
const char ISA_AIX_ZPG_desc  [] /*11*/ PROGMEM = "Zero page";
const char ISA_AIX_ZPG_syntax[] /*11*/ PROGMEM = "OPC *LL";
const char ISA_AIX_ZPX_aname [] /*12*/ PROGMEM = "ZPX";
const char ISA_AIX_ZPX_desc  [] /*12*/ PROGMEM = "Zero page, indexed with x";
const char ISA_AIX_ZPX_syntax[] /*12*/ PROGMEM = "OPC *LL,X";
const char ISA_AIX_ZPY_aname [] /*13*/ PROGMEM = "ZPY";
const char ISA_AIX_ZPY_desc  [] /*13*/ PROGMEM = "Zero page, indexed with y";
const char ISA_AIX_ZPY_syntax[] /*13*/ PROGMEM = "OPC *LL,Y";

// This structure stores the data for one addressing mode definition
// (since it will be mapped to PROGMEM, all fields are const)
typedef struct isa_addrmode_s {
  const char * const aname;
  uint8_t      const bytes;
  const char * const desc;
  const char * const syntax;
} isa_addrmode_t;

// The table storing the attributes of all addressing modes (in PROGMEM)
const isa_addrmode_t isa_addrmodes[] PROGMEM = {
  /* 0*/ { ISA_AIX_0Ea_aname, 0, ISA_AIX_0Ea_desc, ISA_AIX_0Ea_syntax },
  /* 1*/ { ISA_AIX_ABS_aname, 3, ISA_AIX_ABS_desc, ISA_AIX_ABS_syntax },
  /* 2*/ { ISA_AIX_ABX_aname, 3, ISA_AIX_ABX_desc, ISA_AIX_ABX_syntax },
  /* 3*/ { ISA_AIX_ABY_aname, 3, ISA_AIX_ABY_desc, ISA_AIX_ABY_syntax },
  /* 4*/ { ISA_AIX_ACC_aname, 1, ISA_AIX_ACC_desc, ISA_AIX_ACC_syntax },
  /* 5*/ { ISA_AIX_IMM_aname, 2, ISA_AIX_IMM_desc, ISA_AIX_IMM_syntax },
  /* 6*/ { ISA_AIX_IMP_aname, 1, ISA_AIX_IMP_desc, ISA_AIX_IMP_syntax },
  /* 7*/ { ISA_AIX_IND_aname, 3, ISA_AIX_IND_desc, ISA_AIX_IND_syntax },
  /* 8*/ { ISA_AIX_INX_aname, 2, ISA_AIX_INX_desc, ISA_AIX_INX_syntax },
  /* 9*/ { ISA_AIX_INY_aname, 2, ISA_AIX_INY_desc, ISA_AIX_INY_syntax },
  /*10*/ { ISA_AIX_REL_aname, 2, ISA_AIX_REL_desc, ISA_AIX_REL_syntax },
  /*11*/ { ISA_AIX_ZPG_aname, 2, ISA_AIX_ZPG_desc, ISA_AIX_ZPG_syntax },
  /*12*/ { ISA_AIX_ZPX_aname, 2, ISA_AIX_ZPX_desc, ISA_AIX_ZPX_syntax },
  /*13*/ { ISA_AIX_ZPY_aname, 2, ISA_AIX_ZPY_desc, ISA_AIX_ZPY_syntax },
};

const char * isa_addrmode_aname ( int aix ) { return (const char *)pgm_read_word(&isa_addrmodes[aix].aname ); }
uint8_t      isa_addrmode_bytes ( int aix ) { return (uint8_t)pgm_read_byte(&isa_addrmodes[aix].bytes ); }
const char * isa_addrmode_desc  ( int aix ) { return (const char *)pgm_read_word(&isa_addrmodes[aix].desc  ); }
const char * isa_addrmode_syntax( int aix ) { return (const char *)pgm_read_word(&isa_addrmodes[aix].syntax); }

int isa_addrmode_find(const char * aname) {
  char name[4]; for(int i=0; i<3; i++ ) name[i]=toupper(aname[i]); name[3]='\0'; // aname to upper
  int lo= ISA_AIX_FIRST;
  int hi= ISA_AIX_LAST-1;
  while( lo<=hi ) {
    int mid= (lo+hi)/2;
    int cmp= strcmp_P(name,isa_addrmode_aname(mid));
    if( cmp==0 ) return mid;
    if( cmp>0 ) lo=mid+1; else hi=mid-1;
  }
  return 0; // (0 is not a used addrmode index)
}


// INSTRUCTIONS ##################################################
// All instruction strings are mapped to PROGMEM
const char ISA_IIX_0Ei_iname [] /* 0*/ PROGMEM = "0Ei";
const char ISA_IIX_0Ei_desc  [] /* 0*/ PROGMEM = "?Error instruction";
const char ISA_IIX_0Ei_help  [] /* 0*/ PROGMEM = "?Error help";
const char ISA_IIX_0Ei_flags [] /* 0*/ PROGMEM = "?Errflag";
const char ISA_IIX_ADC_iname [] /* 1*/ PROGMEM = "ADC";
const char ISA_IIX_ADC_desc  [] /* 1*/ PROGMEM = "add memory to accumulator with carry";
const char ISA_IIX_ADC_help  [] /* 1*/ PROGMEM = "C <- A + M + C";
const char ISA_IIX_ADC_flags [] /* 1*/ PROGMEM = "NVxbdiZC";
const char ISA_IIX_AND_iname [] /* 2*/ PROGMEM = "AND";
const char ISA_IIX_AND_desc  [] /* 2*/ PROGMEM = "AND memory with accumulator";
const char ISA_IIX_AND_help  [] /* 2*/ PROGMEM = "A <- A AND M";
const char ISA_IIX_AND_flags [] /* 2*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_ASL_iname [] /* 3*/ PROGMEM = "ASL";
const char ISA_IIX_ASL_desc  [] /* 3*/ PROGMEM = "arithmetic shift one bit left (memory or accumulator)";
const char ISA_IIX_ASL_help  [] /* 3*/ PROGMEM = "C <- [76543210] <- 0";
const char ISA_IIX_ASL_flags [] /* 3*/ PROGMEM = "NvxbdiZC";
const char ISA_IIX_BCC_iname [] /* 4*/ PROGMEM = "BCC";
const char ISA_IIX_BCC_desc  [] /* 4*/ PROGMEM = "branch on carry clear";
const char ISA_IIX_BCC_help  [] /* 4*/ PROGMEM = "branch on C = 0";
const char ISA_IIX_BCC_flags [] /* 4*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_BCS_iname [] /* 5*/ PROGMEM = "BCS";
const char ISA_IIX_BCS_desc  [] /* 5*/ PROGMEM = "branch on carry set";
const char ISA_IIX_BCS_help  [] /* 5*/ PROGMEM = "branch on C = 1";
const char ISA_IIX_BCS_flags [] /* 5*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_BEQ_iname [] /* 6*/ PROGMEM = "BEQ";
const char ISA_IIX_BEQ_desc  [] /* 6*/ PROGMEM = "branch on result zero";
const char ISA_IIX_BEQ_help  [] /* 6*/ PROGMEM = "branch on Z = 1";
const char ISA_IIX_BEQ_flags [] /* 6*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_BIT_iname [] /* 7*/ PROGMEM = "BIT";
const char ISA_IIX_BIT_desc  [] /* 7*/ PROGMEM = "test bits in memory with accumulator";
const char ISA_IIX_BIT_help  [] /* 7*/ PROGMEM = "N<-M.7; V<-M.6; Z<-A AND M";
const char ISA_IIX_BIT_flags [] /* 7*/ PROGMEM = "NVxbdiZc";
const char ISA_IIX_BMI_iname [] /* 8*/ PROGMEM = "BMI";
const char ISA_IIX_BMI_desc  [] /* 8*/ PROGMEM = "branch on result minus";
const char ISA_IIX_BMI_help  [] /* 8*/ PROGMEM = "branch on N = 1";
const char ISA_IIX_BMI_flags [] /* 8*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_BNE_iname [] /* 9*/ PROGMEM = "BNE";
const char ISA_IIX_BNE_desc  [] /* 9*/ PROGMEM = "branch on result not zero";
const char ISA_IIX_BNE_help  [] /* 9*/ PROGMEM = "branch on Z = 0";
const char ISA_IIX_BNE_flags [] /* 9*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_BPL_iname [] /*10*/ PROGMEM = "BPL";
const char ISA_IIX_BPL_desc  [] /*10*/ PROGMEM = "branch on result plus";
const char ISA_IIX_BPL_help  [] /*10*/ PROGMEM = "branch on N = 0";
const char ISA_IIX_BPL_flags [] /*10*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_BRK_iname [] /*11*/ PROGMEM = "BRK";
const char ISA_IIX_BRK_desc  [] /*11*/ PROGMEM = "force break";
const char ISA_IIX_BRK_help  [] /*11*/ PROGMEM = "interrupt; push PC+2; push PSR";
const char ISA_IIX_BRK_flags [] /*11*/ PROGMEM = "nvxBdIzc";
const char ISA_IIX_BVC_iname [] /*12*/ PROGMEM = "BVC";
const char ISA_IIX_BVC_desc  [] /*12*/ PROGMEM = "branch on overflow clear";
const char ISA_IIX_BVC_help  [] /*12*/ PROGMEM = "branch on V = 0";
const char ISA_IIX_BVC_flags [] /*12*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_BVS_iname [] /*13*/ PROGMEM = "BVS";
const char ISA_IIX_BVS_desc  [] /*13*/ PROGMEM = "branch on overflow set";
const char ISA_IIX_BVS_help  [] /*13*/ PROGMEM = "branch on V = 1";
const char ISA_IIX_BVS_flags [] /*13*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_CLC_iname [] /*14*/ PROGMEM = "CLC";
const char ISA_IIX_CLC_desc  [] /*14*/ PROGMEM = "clear carry flag";
const char ISA_IIX_CLC_help  [] /*14*/ PROGMEM = "C <- 0";
const char ISA_IIX_CLC_flags [] /*14*/ PROGMEM = "nvxbdizC";
const char ISA_IIX_CLD_iname [] /*15*/ PROGMEM = "CLD";
const char ISA_IIX_CLD_desc  [] /*15*/ PROGMEM = "clear decimal flag";
const char ISA_IIX_CLD_help  [] /*15*/ PROGMEM = "D <- 0";
const char ISA_IIX_CLD_flags [] /*15*/ PROGMEM = "nvxbDizc";
const char ISA_IIX_CLI_iname [] /*16*/ PROGMEM = "CLI";
const char ISA_IIX_CLI_desc  [] /*16*/ PROGMEM = "clear interrupt disable flag";
const char ISA_IIX_CLI_help  [] /*16*/ PROGMEM = "I <- 0 (enabled)";
const char ISA_IIX_CLI_flags [] /*16*/ PROGMEM = "nvxbdIzc";
const char ISA_IIX_CLV_iname [] /*17*/ PROGMEM = "CLV";
const char ISA_IIX_CLV_desc  [] /*17*/ PROGMEM = "clear overflow flag";
const char ISA_IIX_CLV_help  [] /*17*/ PROGMEM = "V <- 0";
const char ISA_IIX_CLV_flags [] /*17*/ PROGMEM = "nVxbdizc";
const char ISA_IIX_CMP_iname [] /*18*/ PROGMEM = "CMP";
const char ISA_IIX_CMP_desc  [] /*18*/ PROGMEM = "compare memory with accumulator";
const char ISA_IIX_CMP_help  [] /*18*/ PROGMEM = "A - M";
const char ISA_IIX_CMP_flags [] /*18*/ PROGMEM = "NvxbdiZC";
const char ISA_IIX_CPX_iname [] /*19*/ PROGMEM = "CPX";
const char ISA_IIX_CPX_desc  [] /*19*/ PROGMEM = "compare memory and index X";
const char ISA_IIX_CPX_help  [] /*19*/ PROGMEM = "X - M";
const char ISA_IIX_CPX_flags [] /*19*/ PROGMEM = "NvxbdiZC";
const char ISA_IIX_CPY_iname [] /*20*/ PROGMEM = "CPY";
const char ISA_IIX_CPY_desc  [] /*20*/ PROGMEM = "compare memory and index Y";
const char ISA_IIX_CPY_help  [] /*20*/ PROGMEM = "Y - M";
const char ISA_IIX_CPY_flags [] /*20*/ PROGMEM = "NvxbdiZC";
const char ISA_IIX_DEC_iname [] /*21*/ PROGMEM = "DEC";
const char ISA_IIX_DEC_desc  [] /*21*/ PROGMEM = "decrement memory by one";
const char ISA_IIX_DEC_help  [] /*21*/ PROGMEM = "M <- M - 1";
const char ISA_IIX_DEC_flags [] /*21*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_DEX_iname [] /*22*/ PROGMEM = "DEX";
const char ISA_IIX_DEX_desc  [] /*22*/ PROGMEM = "decrement index X by one";
const char ISA_IIX_DEX_help  [] /*22*/ PROGMEM = "X <- X - 1";
const char ISA_IIX_DEX_flags [] /*22*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_DEY_iname [] /*23*/ PROGMEM = "DEY";
const char ISA_IIX_DEY_desc  [] /*23*/ PROGMEM = "decrement index Y by one";
const char ISA_IIX_DEY_help  [] /*23*/ PROGMEM = "Y <- Y - 1";
const char ISA_IIX_DEY_flags [] /*23*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_EOR_iname [] /*24*/ PROGMEM = "EOR";
const char ISA_IIX_EOR_desc  [] /*24*/ PROGMEM = "EOR (exclusive-or) memory with accumulator";
const char ISA_IIX_EOR_help  [] /*24*/ PROGMEM = "A <- A EOR M";
const char ISA_IIX_EOR_flags [] /*24*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_INC_iname [] /*25*/ PROGMEM = "INC";
const char ISA_IIX_INC_desc  [] /*25*/ PROGMEM = "increment memory by one";
const char ISA_IIX_INC_help  [] /*25*/ PROGMEM = "M <- M + 1";
const char ISA_IIX_INC_flags [] /*25*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_INX_iname [] /*26*/ PROGMEM = "INX";
const char ISA_IIX_INX_desc  [] /*26*/ PROGMEM = "increment index X by one";
const char ISA_IIX_INX_help  [] /*26*/ PROGMEM = "X <- X + 1";
const char ISA_IIX_INX_flags [] /*26*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_INY_iname [] /*27*/ PROGMEM = "INY";
const char ISA_IIX_INY_desc  [] /*27*/ PROGMEM = "increment index Y by one";
const char ISA_IIX_INY_help  [] /*27*/ PROGMEM = "Y <- Y + 1";
const char ISA_IIX_INY_flags [] /*27*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_JMP_iname [] /*28*/ PROGMEM = "JMP";
const char ISA_IIX_JMP_desc  [] /*28*/ PROGMEM = "jump to new location";
const char ISA_IIX_JMP_help  [] /*28*/ PROGMEM = "PCL <- (PC+1); PCH <- (PC+2)";
const char ISA_IIX_JMP_flags [] /*28*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_JSR_iname [] /*29*/ PROGMEM = "JSR";
const char ISA_IIX_JSR_desc  [] /*29*/ PROGMEM = "jump to new location saving return address";
const char ISA_IIX_JSR_help  [] /*29*/ PROGMEM = "push (PC+2); PCL <- (PC+1); PCH <- (PC+2)";
const char ISA_IIX_JSR_flags [] /*29*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_LDA_iname [] /*30*/ PROGMEM = "LDA";
const char ISA_IIX_LDA_desc  [] /*30*/ PROGMEM = "load accumulator with memory";
const char ISA_IIX_LDA_help  [] /*30*/ PROGMEM = "A <- M";
const char ISA_IIX_LDA_flags [] /*30*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_LDX_iname [] /*31*/ PROGMEM = "LDX";
const char ISA_IIX_LDX_desc  [] /*31*/ PROGMEM = "load index X with memory";
const char ISA_IIX_LDX_help  [] /*31*/ PROGMEM = "X <- M";
const char ISA_IIX_LDX_flags [] /*31*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_LDY_iname [] /*32*/ PROGMEM = "LDY";
const char ISA_IIX_LDY_desc  [] /*32*/ PROGMEM = "load index Y with memory";
const char ISA_IIX_LDY_help  [] /*32*/ PROGMEM = "Y <- M";
const char ISA_IIX_LDY_flags [] /*32*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_LSR_iname [] /*33*/ PROGMEM = "LSR";
const char ISA_IIX_LSR_desc  [] /*33*/ PROGMEM = "logic shift one bit right (memory or accumulator)";
const char ISA_IIX_LSR_help  [] /*33*/ PROGMEM = "0 -> [76543210] -> C";
const char ISA_IIX_LSR_flags [] /*33*/ PROGMEM = "NvxbdiZC";
const char ISA_IIX_NOP_iname [] /*34*/ PROGMEM = "NOP";
const char ISA_IIX_NOP_desc  [] /*34*/ PROGMEM = "No operation";
const char ISA_IIX_NOP_help  [] /*34*/ PROGMEM = "skip";
const char ISA_IIX_NOP_flags [] /*34*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_ORA_iname [] /*35*/ PROGMEM = "ORA";
const char ISA_IIX_ORA_desc  [] /*35*/ PROGMEM = "OR memory with accumulator";
const char ISA_IIX_ORA_help  [] /*35*/ PROGMEM = "A <- A OR M";
const char ISA_IIX_ORA_flags [] /*35*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_PHA_iname [] /*36*/ PROGMEM = "PHA";
const char ISA_IIX_PHA_desc  [] /*36*/ PROGMEM = "push accumulator on stack";
const char ISA_IIX_PHA_help  [] /*36*/ PROGMEM = "push A";
const char ISA_IIX_PHA_flags [] /*36*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_PHP_iname [] /*37*/ PROGMEM = "PHP";
const char ISA_IIX_PHP_desc  [] /*37*/ PROGMEM = "push processor status register on stack";
const char ISA_IIX_PHP_help  [] /*37*/ PROGMEM = "push PSR";
const char ISA_IIX_PHP_flags [] /*37*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_PLA_iname [] /*38*/ PROGMEM = "PLA";
const char ISA_IIX_PLA_desc  [] /*38*/ PROGMEM = "pull accumulator from stack";
const char ISA_IIX_PLA_help  [] /*38*/ PROGMEM = "pull A";
const char ISA_IIX_PLA_flags [] /*38*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_PLP_iname [] /*39*/ PROGMEM = "PLP";
const char ISA_IIX_PLP_desc  [] /*39*/ PROGMEM = "pull processor status register from stack";
const char ISA_IIX_PLP_help  [] /*39*/ PROGMEM = "pull PSR";
const char ISA_IIX_PLP_flags [] /*39*/ PROGMEM = "NVxbDIZC";
const char ISA_IIX_ROL_iname [] /*40*/ PROGMEM = "ROL";
const char ISA_IIX_ROL_desc  [] /*40*/ PROGMEM = "rotate one bit left (memory or accumulator)";
const char ISA_IIX_ROL_help  [] /*40*/ PROGMEM = "C <- [76543210] <- C";
const char ISA_IIX_ROL_flags [] /*40*/ PROGMEM = "NvxbdiZC";
const char ISA_IIX_ROR_iname [] /*41*/ PROGMEM = "ROR";
const char ISA_IIX_ROR_desc  [] /*41*/ PROGMEM = "rotate one bit right (memory or accumulator)";
const char ISA_IIX_ROR_help  [] /*41*/ PROGMEM = "C -> [76543210] -> C";
const char ISA_IIX_ROR_flags [] /*41*/ PROGMEM = "NvxbdiZC";
const char ISA_IIX_RTI_iname [] /*42*/ PROGMEM = "RTI";
const char ISA_IIX_RTI_desc  [] /*42*/ PROGMEM = "return from interrupt";
const char ISA_IIX_RTI_help  [] /*42*/ PROGMEM = "pull PSR; pull PCL; pull PCH";
const char ISA_IIX_RTI_flags [] /*42*/ PROGMEM = "NVxbDIZC";
const char ISA_IIX_RTS_iname [] /*43*/ PROGMEM = "RTS";
const char ISA_IIX_RTS_desc  [] /*43*/ PROGMEM = "return from subroutine";
const char ISA_IIX_RTS_help  [] /*43*/ PROGMEM = "pull PCL; pull PCH; PC <- PC+1";
const char ISA_IIX_RTS_flags [] /*43*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_SBC_iname [] /*44*/ PROGMEM = "SBC";
const char ISA_IIX_SBC_desc  [] /*44*/ PROGMEM = "subtract memory from accumulator with borrow";
const char ISA_IIX_SBC_help  [] /*44*/ PROGMEM = "A <- A - M - C";
const char ISA_IIX_SBC_flags [] /*44*/ PROGMEM = "NVxbdiZC";
const char ISA_IIX_SEC_iname [] /*45*/ PROGMEM = "SEC";
const char ISA_IIX_SEC_desc  [] /*45*/ PROGMEM = "set carry flag";
const char ISA_IIX_SEC_help  [] /*45*/ PROGMEM = "C <- 1";
const char ISA_IIX_SEC_flags [] /*45*/ PROGMEM = "nvxbdizC";
const char ISA_IIX_SED_iname [] /*46*/ PROGMEM = "SED";
const char ISA_IIX_SED_desc  [] /*46*/ PROGMEM = "set decimal flag";
const char ISA_IIX_SED_help  [] /*46*/ PROGMEM = "D <- 1";
const char ISA_IIX_SED_flags [] /*46*/ PROGMEM = "nvxbDizc";
const char ISA_IIX_SEI_iname [] /*47*/ PROGMEM = "SEI";
const char ISA_IIX_SEI_desc  [] /*47*/ PROGMEM = "set interrupt disable flag";
const char ISA_IIX_SEI_help  [] /*47*/ PROGMEM = "I <- 1 (disabled)";
const char ISA_IIX_SEI_flags [] /*47*/ PROGMEM = "nvxbdIzc";
const char ISA_IIX_STA_iname [] /*48*/ PROGMEM = "STA";
const char ISA_IIX_STA_desc  [] /*48*/ PROGMEM = "store accumulator in memory";
const char ISA_IIX_STA_help  [] /*48*/ PROGMEM = "M <- A";
const char ISA_IIX_STA_flags [] /*48*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_STX_iname [] /*49*/ PROGMEM = "STX";
const char ISA_IIX_STX_desc  [] /*49*/ PROGMEM = "store index X in memory";
const char ISA_IIX_STX_help  [] /*49*/ PROGMEM = "M <- X";
const char ISA_IIX_STX_flags [] /*49*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_STY_iname [] /*50*/ PROGMEM = "STY";
const char ISA_IIX_STY_desc  [] /*50*/ PROGMEM = "store index Y in memory";
const char ISA_IIX_STY_help  [] /*50*/ PROGMEM = "M <- Y";
const char ISA_IIX_STY_flags [] /*50*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_TAX_iname [] /*51*/ PROGMEM = "TAX";
const char ISA_IIX_TAX_desc  [] /*51*/ PROGMEM = "transfer accumulator to index X";
const char ISA_IIX_TAX_help  [] /*51*/ PROGMEM = "X <- A";
const char ISA_IIX_TAX_flags [] /*51*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_TAY_iname [] /*52*/ PROGMEM = "TAY";
const char ISA_IIX_TAY_desc  [] /*52*/ PROGMEM = "transfer accumulator to index Y";
const char ISA_IIX_TAY_help  [] /*52*/ PROGMEM = "Y <- A";
const char ISA_IIX_TAY_flags [] /*52*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_TSX_iname [] /*53*/ PROGMEM = "TSX";
const char ISA_IIX_TSX_desc  [] /*53*/ PROGMEM = "transfer stack pointer to index X";
const char ISA_IIX_TSX_help  [] /*53*/ PROGMEM = "X <- SP";
const char ISA_IIX_TSX_flags [] /*53*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_TXA_iname [] /*54*/ PROGMEM = "TXA";
const char ISA_IIX_TXA_desc  [] /*54*/ PROGMEM = "transfer index X to accumulator";
const char ISA_IIX_TXA_help  [] /*54*/ PROGMEM = "A <- X";
const char ISA_IIX_TXA_flags [] /*54*/ PROGMEM = "NvxbdiZc";
const char ISA_IIX_TXS_iname [] /*55*/ PROGMEM = "TXS";
const char ISA_IIX_TXS_desc  [] /*55*/ PROGMEM = "transfer index X to stack register";
const char ISA_IIX_TXS_help  [] /*55*/ PROGMEM = "SP <- X";
const char ISA_IIX_TXS_flags [] /*55*/ PROGMEM = "nvxbdizc";
const char ISA_IIX_TYA_iname [] /*56*/ PROGMEM = "TYA";
const char ISA_IIX_TYA_desc  [] /*56*/ PROGMEM = "transfer index Y to accumulator";
const char ISA_IIX_TYA_help  [] /*56*/ PROGMEM = "A <- Y";
const char ISA_IIX_TYA_flags [] /*56*/ PROGMEM = "NvxbdiZc";

// This structure stores the data for one instruction (e.g. the LDA)
// (since it will be mapped to PROGMEM, all fields are const)
typedef struct isa_instruction_s {
  const char * const iname;
  const char * const desc;
  const char * const help;
  const char * const flags;
  const uint8_t opcodes[14]; // for each addrmode, the opcode
} isa_instruction_t;

// Opcode 0xBB is not in use in the 6502. We use it in instructions.opcodes to signal the addrmode does not exist for that instruction
#define ISA_OPCODE_INVALID 0xBB

// The table storing all attributes of instructions (in PROGMEM)
const isa_instruction_t isa_instructions[] PROGMEM = {
  /* 0*/ { ISA_IIX_0Ei_iname, ISA_IIX_0Ei_desc, ISA_IIX_0Ei_help, ISA_IIX_0Ei_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /* 1*/ { ISA_IIX_ADC_iname, ISA_IIX_ADC_desc, ISA_IIX_ADC_help, ISA_IIX_ADC_flags, {0xbb,0x6d,0x7d,0x79,0xbb,0x69,0xbb,0xbb,0x61,0x71,0xbb,0x65,0x75,0xbb} },
  /* 2*/ { ISA_IIX_AND_iname, ISA_IIX_AND_desc, ISA_IIX_AND_help, ISA_IIX_AND_flags, {0xbb,0x2d,0x3d,0x39,0xbb,0x29,0xbb,0xbb,0x21,0x31,0xbb,0x25,0x35,0xbb} },
  /* 3*/ { ISA_IIX_ASL_iname, ISA_IIX_ASL_desc, ISA_IIX_ASL_help, ISA_IIX_ASL_flags, {0xbb,0x0e,0x1e,0xbb,0x0a,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x06,0x16,0xbb} },
  /* 4*/ { ISA_IIX_BCC_iname, ISA_IIX_BCC_desc, ISA_IIX_BCC_help, ISA_IIX_BCC_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x90,0xbb,0xbb,0xbb} },
  /* 5*/ { ISA_IIX_BCS_iname, ISA_IIX_BCS_desc, ISA_IIX_BCS_help, ISA_IIX_BCS_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xb0,0xbb,0xbb,0xbb} },
  /* 6*/ { ISA_IIX_BEQ_iname, ISA_IIX_BEQ_desc, ISA_IIX_BEQ_help, ISA_IIX_BEQ_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xf0,0xbb,0xbb,0xbb} },
  /* 7*/ { ISA_IIX_BIT_iname, ISA_IIX_BIT_desc, ISA_IIX_BIT_help, ISA_IIX_BIT_flags, {0xbb,0x2c,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x24,0xbb,0xbb} },
  /* 8*/ { ISA_IIX_BMI_iname, ISA_IIX_BMI_desc, ISA_IIX_BMI_help, ISA_IIX_BMI_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x30,0xbb,0xbb,0xbb} },
  /* 9*/ { ISA_IIX_BNE_iname, ISA_IIX_BNE_desc, ISA_IIX_BNE_help, ISA_IIX_BNE_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xd0,0xbb,0xbb,0xbb} },
  /*10*/ { ISA_IIX_BPL_iname, ISA_IIX_BPL_desc, ISA_IIX_BPL_help, ISA_IIX_BPL_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x10,0xbb,0xbb,0xbb} },
  /*11*/ { ISA_IIX_BRK_iname, ISA_IIX_BRK_desc, ISA_IIX_BRK_help, ISA_IIX_BRK_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x00,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*12*/ { ISA_IIX_BVC_iname, ISA_IIX_BVC_desc, ISA_IIX_BVC_help, ISA_IIX_BVC_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x50,0xbb,0xbb,0xbb} },
  /*13*/ { ISA_IIX_BVS_iname, ISA_IIX_BVS_desc, ISA_IIX_BVS_help, ISA_IIX_BVS_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x70,0xbb,0xbb,0xbb} },
  /*14*/ { ISA_IIX_CLC_iname, ISA_IIX_CLC_desc, ISA_IIX_CLC_help, ISA_IIX_CLC_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x18,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*15*/ { ISA_IIX_CLD_iname, ISA_IIX_CLD_desc, ISA_IIX_CLD_help, ISA_IIX_CLD_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xd8,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*16*/ { ISA_IIX_CLI_iname, ISA_IIX_CLI_desc, ISA_IIX_CLI_help, ISA_IIX_CLI_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x58,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*17*/ { ISA_IIX_CLV_iname, ISA_IIX_CLV_desc, ISA_IIX_CLV_help, ISA_IIX_CLV_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xb8,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*18*/ { ISA_IIX_CMP_iname, ISA_IIX_CMP_desc, ISA_IIX_CMP_help, ISA_IIX_CMP_flags, {0xbb,0xcd,0xdd,0xd9,0xbb,0xc9,0xbb,0xbb,0xc1,0xd1,0xbb,0xc5,0xd5,0xbb} },
  /*19*/ { ISA_IIX_CPX_iname, ISA_IIX_CPX_desc, ISA_IIX_CPX_help, ISA_IIX_CPX_flags, {0xbb,0xec,0xbb,0xbb,0xbb,0xe0,0xbb,0xbb,0xbb,0xbb,0xbb,0xe4,0xbb,0xbb} },
  /*20*/ { ISA_IIX_CPY_iname, ISA_IIX_CPY_desc, ISA_IIX_CPY_help, ISA_IIX_CPY_flags, {0xbb,0xcc,0xbb,0xbb,0xbb,0xc0,0xbb,0xbb,0xbb,0xbb,0xbb,0xc4,0xbb,0xbb} },
  /*21*/ { ISA_IIX_DEC_iname, ISA_IIX_DEC_desc, ISA_IIX_DEC_help, ISA_IIX_DEC_flags, {0xbb,0xce,0xde,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xc6,0xd6,0xbb} },
  /*22*/ { ISA_IIX_DEX_iname, ISA_IIX_DEX_desc, ISA_IIX_DEX_help, ISA_IIX_DEX_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xca,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*23*/ { ISA_IIX_DEY_iname, ISA_IIX_DEY_desc, ISA_IIX_DEY_help, ISA_IIX_DEY_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x88,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*24*/ { ISA_IIX_EOR_iname, ISA_IIX_EOR_desc, ISA_IIX_EOR_help, ISA_IIX_EOR_flags, {0xbb,0x4d,0x5d,0x59,0xbb,0x49,0xbb,0xbb,0x41,0x51,0xbb,0x45,0x55,0xbb} },
  /*25*/ { ISA_IIX_INC_iname, ISA_IIX_INC_desc, ISA_IIX_INC_help, ISA_IIX_INC_flags, {0xbb,0xee,0xfe,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xe6,0xf6,0xbb} },
  /*26*/ { ISA_IIX_INX_iname, ISA_IIX_INX_desc, ISA_IIX_INX_help, ISA_IIX_INX_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xe8,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*27*/ { ISA_IIX_INY_iname, ISA_IIX_INY_desc, ISA_IIX_INY_help, ISA_IIX_INY_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xc8,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*28*/ { ISA_IIX_JMP_iname, ISA_IIX_JMP_desc, ISA_IIX_JMP_help, ISA_IIX_JMP_flags, {0xbb,0x4c,0xbb,0xbb,0xbb,0xbb,0xbb,0x6c,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*29*/ { ISA_IIX_JSR_iname, ISA_IIX_JSR_desc, ISA_IIX_JSR_help, ISA_IIX_JSR_flags, {0xbb,0x20,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*30*/ { ISA_IIX_LDA_iname, ISA_IIX_LDA_desc, ISA_IIX_LDA_help, ISA_IIX_LDA_flags, {0xbb,0xad,0xbd,0xb9,0xbb,0xa9,0xbb,0xbb,0xa1,0xb1,0xbb,0xa5,0xb5,0xbb} },
  /*31*/ { ISA_IIX_LDX_iname, ISA_IIX_LDX_desc, ISA_IIX_LDX_help, ISA_IIX_LDX_flags, {0xbb,0xae,0xbb,0xbe,0xbb,0xa2,0xbb,0xbb,0xbb,0xbb,0xbb,0xa6,0xbb,0xb6} },
  /*32*/ { ISA_IIX_LDY_iname, ISA_IIX_LDY_desc, ISA_IIX_LDY_help, ISA_IIX_LDY_flags, {0xbb,0xac,0xbc,0xbb,0xbb,0xa0,0xbb,0xbb,0xbb,0xbb,0xbb,0xa4,0xb4,0xbb} },
  /*33*/ { ISA_IIX_LSR_iname, ISA_IIX_LSR_desc, ISA_IIX_LSR_help, ISA_IIX_LSR_flags, {0xbb,0x4e,0x5e,0xbb,0x4a,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x46,0x56,0xbb} },
  /*34*/ { ISA_IIX_NOP_iname, ISA_IIX_NOP_desc, ISA_IIX_NOP_help, ISA_IIX_NOP_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xea,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*35*/ { ISA_IIX_ORA_iname, ISA_IIX_ORA_desc, ISA_IIX_ORA_help, ISA_IIX_ORA_flags, {0xbb,0x0d,0x1d,0x19,0xbb,0x09,0xbb,0xbb,0x01,0x11,0xbb,0x05,0x15,0xbb} },
  /*36*/ { ISA_IIX_PHA_iname, ISA_IIX_PHA_desc, ISA_IIX_PHA_help, ISA_IIX_PHA_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x48,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*37*/ { ISA_IIX_PHP_iname, ISA_IIX_PHP_desc, ISA_IIX_PHP_help, ISA_IIX_PHP_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x08,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*38*/ { ISA_IIX_PLA_iname, ISA_IIX_PLA_desc, ISA_IIX_PLA_help, ISA_IIX_PLA_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x68,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*39*/ { ISA_IIX_PLP_iname, ISA_IIX_PLP_desc, ISA_IIX_PLP_help, ISA_IIX_PLP_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x28,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*40*/ { ISA_IIX_ROL_iname, ISA_IIX_ROL_desc, ISA_IIX_ROL_help, ISA_IIX_ROL_flags, {0xbb,0x2e,0x3e,0xbb,0x2a,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x26,0x36,0xbb} },
  /*41*/ { ISA_IIX_ROR_iname, ISA_IIX_ROR_desc, ISA_IIX_ROR_help, ISA_IIX_ROR_flags, {0xbb,0x6e,0x7e,0xbb,0x6a,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x66,0x76,0xbb} },
  /*42*/ { ISA_IIX_RTI_iname, ISA_IIX_RTI_desc, ISA_IIX_RTI_help, ISA_IIX_RTI_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x40,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*43*/ { ISA_IIX_RTS_iname, ISA_IIX_RTS_desc, ISA_IIX_RTS_help, ISA_IIX_RTS_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x60,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*44*/ { ISA_IIX_SBC_iname, ISA_IIX_SBC_desc, ISA_IIX_SBC_help, ISA_IIX_SBC_flags, {0xbb,0xed,0xfd,0xf9,0xbb,0xe9,0xbb,0xbb,0xe1,0xf1,0xbb,0xe5,0xf5,0xbb} },
  /*45*/ { ISA_IIX_SEC_iname, ISA_IIX_SEC_desc, ISA_IIX_SEC_help, ISA_IIX_SEC_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x38,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*46*/ { ISA_IIX_SED_iname, ISA_IIX_SED_desc, ISA_IIX_SED_help, ISA_IIX_SED_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xf8,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*47*/ { ISA_IIX_SEI_iname, ISA_IIX_SEI_desc, ISA_IIX_SEI_help, ISA_IIX_SEI_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x78,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*48*/ { ISA_IIX_STA_iname, ISA_IIX_STA_desc, ISA_IIX_STA_help, ISA_IIX_STA_flags, {0xbb,0x8d,0x9d,0x99,0xbb,0xbb,0xbb,0xbb,0x81,0x91,0xbb,0x85,0x95,0xbb} },
  /*49*/ { ISA_IIX_STX_iname, ISA_IIX_STX_desc, ISA_IIX_STX_help, ISA_IIX_STX_flags, {0xbb,0x8e,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x86,0xbb,0x96} },
  /*50*/ { ISA_IIX_STY_iname, ISA_IIX_STY_desc, ISA_IIX_STY_help, ISA_IIX_STY_flags, {0xbb,0x8c,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x84,0x94,0xbb} },
  /*51*/ { ISA_IIX_TAX_iname, ISA_IIX_TAX_desc, ISA_IIX_TAX_help, ISA_IIX_TAX_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xaa,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*52*/ { ISA_IIX_TAY_iname, ISA_IIX_TAY_desc, ISA_IIX_TAY_help, ISA_IIX_TAY_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xa8,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*53*/ { ISA_IIX_TSX_iname, ISA_IIX_TSX_desc, ISA_IIX_TSX_help, ISA_IIX_TSX_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xba,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*54*/ { ISA_IIX_TXA_iname, ISA_IIX_TXA_desc, ISA_IIX_TXA_help, ISA_IIX_TXA_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x8a,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*55*/ { ISA_IIX_TXS_iname, ISA_IIX_TXS_desc, ISA_IIX_TXS_help, ISA_IIX_TXS_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x9a,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
  /*56*/ { ISA_IIX_TYA_iname, ISA_IIX_TYA_desc, ISA_IIX_TYA_help, ISA_IIX_TYA_flags, {0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0x98,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb} },
};

const char *  isa_instruction_iname  ( int iix )          { return (const char *)pgm_read_word(&isa_instructions[iix].iname ); }
const char *  isa_instruction_desc   ( int iix )          { return (const char *)pgm_read_word(&isa_instructions[iix].desc  ); }
const char *  isa_instruction_help   ( int iix )          { return (const char *)pgm_read_word(&isa_instructions[iix].help  ); }
const char *  isa_instruction_flags  ( int iix )          { return (const char *)pgm_read_word(&isa_instructions[iix].flags ); }
uint8_t       isa_instruction_opcodes( int iix, int aix ) { return (uint8_t     )pgm_read_byte(&isa_instructions[iix].opcodes[aix] ); }

int isa_instruction_find(const char * iname) {
  char name[4]; for(int i=0; i<3; i++ ) name[i]=toupper(iname[i]); name[3]='\0'; // iname to upper
  int lo= ISA_IIX_FIRST;
  int hi= ISA_IIX_LAST-1;
  while( lo<=hi ) {
    int mid= (lo+hi)/2;
    int cmp= strcmp_P(name,isa_instruction_iname(mid));
    if( cmp==0 ) return mid;
    if( cmp>0 ) lo=mid+1; else hi=mid-1;
  }
  return 0; // (0 is not a used instruction index)
}


// ADDRMODES #####################################################
// This structure stores the data for one opcode (e.g. 0xAD or LDA.ABS)
// (since it will be mapped to PROGMEM, all fields are const)
typedef struct isa_opcode_s {
  uint8_t      const iix; // index into isa_instructions[]
  uint8_t      const aix; // index into isa_addrmodes[]
  uint8_t      const cycles;
  uint8_t      const xcycles;
} opcode_t;

// The table storing all attributes of opcodes (in PROGMEM)
const opcode_t isa_opcodes[] PROGMEM = {
  /*00*/ { ISA_IIX_BRK, ISA_AIX_IMP, 7, 0 },
  /*01*/ { ISA_IIX_ORA, ISA_AIX_INX, 6, 0 },
  /*02*/ { 0, 0, 0, 0 },
  /*03*/ { 0, 0, 0, 0 },
  /*04*/ { 0, 0, 0, 0 },
  /*05*/ { ISA_IIX_ORA, ISA_AIX_ZPG, 3, 0 },
  /*06*/ { ISA_IIX_ASL, ISA_AIX_ZPG, 5, 0 },
  /*07*/ { 0, 0, 0, 0 },
  /*08*/ { ISA_IIX_PHP, ISA_AIX_IMP, 3, 0 },
  /*09*/ { ISA_IIX_ORA, ISA_AIX_IMM, 2, 0 },
  /*0a*/ { ISA_IIX_ASL, ISA_AIX_ACC, 2, 0 },
  /*0b*/ { 0, 0, 0, 0 },
  /*0c*/ { 0, 0, 0, 0 },
  /*0d*/ { ISA_IIX_ORA, ISA_AIX_ABS, 4, 0 },
  /*0e*/ { ISA_IIX_ASL, ISA_AIX_ABS, 6, 0 },
  /*0f*/ { 0, 0, 0, 0 },
  /*10*/ { ISA_IIX_BPL, ISA_AIX_REL, 2, 2 },
  /*11*/ { ISA_IIX_ORA, ISA_AIX_INY, 5, 1 },
  /*12*/ { 0, 0, 0, 0 },
  /*13*/ { 0, 0, 0, 0 },
  /*14*/ { 0, 0, 0, 0 },
  /*15*/ { ISA_IIX_ORA, ISA_AIX_ZPX, 4, 0 },
  /*16*/ { ISA_IIX_ASL, ISA_AIX_ZPX, 6, 0 },
  /*17*/ { 0, 0, 0, 0 },
  /*18*/ { ISA_IIX_CLC, ISA_AIX_IMP, 2, 0 },
  /*19*/ { ISA_IIX_ORA, ISA_AIX_ABY, 4, 1 },
  /*1a*/ { 0, 0, 0, 0 },
  /*1b*/ { 0, 0, 0, 0 },
  /*1c*/ { 0, 0, 0, 0 },
  /*1d*/ { ISA_IIX_ORA, ISA_AIX_ABX, 4, 1 },
  /*1e*/ { ISA_IIX_ASL, ISA_AIX_ABX, 7, 0 },
  /*1f*/ { 0, 0, 0, 0 },
  /*20*/ { ISA_IIX_JSR, ISA_AIX_ABS, 6, 0 },
  /*21*/ { ISA_IIX_AND, ISA_AIX_INX, 6, 0 },
  /*22*/ { 0, 0, 0, 0 },
  /*23*/ { 0, 0, 0, 0 },
  /*24*/ { ISA_IIX_BIT, ISA_AIX_ZPG, 3, 0 },
  /*25*/ { ISA_IIX_AND, ISA_AIX_ZPG, 3, 0 },
  /*26*/ { ISA_IIX_ROL, ISA_AIX_ZPG, 5, 0 },
  /*27*/ { 0, 0, 0, 0 },
  /*28*/ { ISA_IIX_PLP, ISA_AIX_IMP, 4, 0 },
  /*29*/ { ISA_IIX_AND, ISA_AIX_IMM, 2, 0 },
  /*2a*/ { ISA_IIX_ROL, ISA_AIX_ACC, 2, 0 },
  /*2b*/ { 0, 0, 0, 0 },
  /*2c*/ { ISA_IIX_BIT, ISA_AIX_ABS, 4, 0 },
  /*2d*/ { ISA_IIX_AND, ISA_AIX_ABS, 4, 0 },
  /*2e*/ { ISA_IIX_ROL, ISA_AIX_ABS, 6, 0 },
  /*2f*/ { 0, 0, 0, 0 },
  /*30*/ { ISA_IIX_BMI, ISA_AIX_REL, 2, 2 },
  /*31*/ { ISA_IIX_AND, ISA_AIX_INY, 5, 1 },
  /*32*/ { 0, 0, 0, 0 },
  /*33*/ { 0, 0, 0, 0 },
  /*34*/ { 0, 0, 0, 0 },
  /*35*/ { ISA_IIX_AND, ISA_AIX_ZPX, 4, 0 },
  /*36*/ { ISA_IIX_ROL, ISA_AIX_ZPX, 6, 0 },
  /*37*/ { 0, 0, 0, 0 },
  /*38*/ { ISA_IIX_SEC, ISA_AIX_IMP, 2, 0 },
  /*39*/ { ISA_IIX_AND, ISA_AIX_ABY, 4, 1 },
  /*3a*/ { 0, 0, 0, 0 },
  /*3b*/ { 0, 0, 0, 0 },
  /*3c*/ { 0, 0, 0, 0 },
  /*3d*/ { ISA_IIX_AND, ISA_AIX_ABX, 4, 1 },
  /*3e*/ { ISA_IIX_ROL, ISA_AIX_ABX, 7, 0 },
  /*3f*/ { 0, 0, 0, 0 },
  /*40*/ { ISA_IIX_RTI, ISA_AIX_IMP, 6, 0 },
  /*41*/ { ISA_IIX_EOR, ISA_AIX_INX, 6, 0 },
  /*42*/ { 0, 0, 0, 0 },
  /*43*/ { 0, 0, 0, 0 },
  /*44*/ { 0, 0, 0, 0 },
  /*45*/ { ISA_IIX_EOR, ISA_AIX_ZPG, 3, 0 },
  /*46*/ { ISA_IIX_LSR, ISA_AIX_ZPG, 5, 0 },
  /*47*/ { 0, 0, 0, 0 },
  /*48*/ { ISA_IIX_PHA, ISA_AIX_IMP, 3, 0 },
  /*49*/ { ISA_IIX_EOR, ISA_AIX_IMM, 2, 0 },
  /*4a*/ { ISA_IIX_LSR, ISA_AIX_ACC, 2, 0 },
  /*4b*/ { 0, 0, 0, 0 },
  /*4c*/ { ISA_IIX_JMP, ISA_AIX_ABS, 3, 0 },
  /*4d*/ { ISA_IIX_EOR, ISA_AIX_ABS, 4, 0 },
  /*4e*/ { ISA_IIX_LSR, ISA_AIX_ABS, 6, 0 },
  /*4f*/ { 0, 0, 0, 0 },
  /*50*/ { ISA_IIX_BVC, ISA_AIX_REL, 2, 2 },
  /*51*/ { ISA_IIX_EOR, ISA_AIX_INY, 5, 1 },
  /*52*/ { 0, 0, 0, 0 },
  /*53*/ { 0, 0, 0, 0 },
  /*54*/ { 0, 0, 0, 0 },
  /*55*/ { ISA_IIX_EOR, ISA_AIX_ZPX, 4, 0 },
  /*56*/ { ISA_IIX_LSR, ISA_AIX_ZPX, 6, 0 },
  /*57*/ { 0, 0, 0, 0 },
  /*58*/ { ISA_IIX_CLI, ISA_AIX_IMP, 2, 0 },
  /*59*/ { ISA_IIX_EOR, ISA_AIX_ABY, 4, 1 },
  /*5a*/ { 0, 0, 0, 0 },
  /*5b*/ { 0, 0, 0, 0 },
  /*5c*/ { 0, 0, 0, 0 },
  /*5d*/ { ISA_IIX_EOR, ISA_AIX_ABX, 4, 1 },
  /*5e*/ { ISA_IIX_LSR, ISA_AIX_ABX, 7, 0 },
  /*5f*/ { 0, 0, 0, 0 },
  /*60*/ { ISA_IIX_RTS, ISA_AIX_IMP, 6, 0 },
  /*61*/ { ISA_IIX_ADC, ISA_AIX_INX, 6, 0 },
  /*62*/ { 0, 0, 0, 0 },
  /*63*/ { 0, 0, 0, 0 },
  /*64*/ { 0, 0, 0, 0 },
  /*65*/ { ISA_IIX_ADC, ISA_AIX_ZPG, 3, 0 },
  /*66*/ { ISA_IIX_ROR, ISA_AIX_ZPG, 5, 0 },
  /*67*/ { 0, 0, 0, 0 },
  /*68*/ { ISA_IIX_PLA, ISA_AIX_IMP, 4, 0 },
  /*69*/ { ISA_IIX_ADC, ISA_AIX_IMM, 2, 0 },
  /*6a*/ { ISA_IIX_ROR, ISA_AIX_ACC, 2, 0 },
  /*6b*/ { 0, 0, 0, 0 },
  /*6c*/ { ISA_IIX_JMP, ISA_AIX_IND, 5, 0 },
  /*6d*/ { ISA_IIX_ADC, ISA_AIX_ABS, 4, 0 },
  /*6e*/ { ISA_IIX_ROR, ISA_AIX_ABS, 6, 0 },
  /*6f*/ { 0, 0, 0, 0 },
  /*70*/ { ISA_IIX_BVS, ISA_AIX_REL, 2, 2 },
  /*71*/ { ISA_IIX_ADC, ISA_AIX_INY, 5, 1 },
  /*72*/ { 0, 0, 0, 0 },
  /*73*/ { 0, 0, 0, 0 },
  /*74*/ { 0, 0, 0, 0 },
  /*75*/ { ISA_IIX_ADC, ISA_AIX_ZPX, 4, 0 },
  /*76*/ { ISA_IIX_ROR, ISA_AIX_ZPX, 6, 0 },
  /*77*/ { 0, 0, 0, 0 },
  /*78*/ { ISA_IIX_SEI, ISA_AIX_IMP, 2, 0 },
  /*79*/ { ISA_IIX_ADC, ISA_AIX_ABY, 4, 1 },
  /*7a*/ { 0, 0, 0, 0 },
  /*7b*/ { 0, 0, 0, 0 },
  /*7c*/ { 0, 0, 0, 0 },
  /*7d*/ { ISA_IIX_ADC, ISA_AIX_ABX, 4, 1 },
  /*7e*/ { ISA_IIX_ROR, ISA_AIX_ABX, 7, 0 },
  /*7f*/ { 0, 0, 0, 0 },
  /*80*/ { 0, 0, 0, 0 },
  /*81*/ { ISA_IIX_STA, ISA_AIX_INX, 6, 0 },
  /*82*/ { 0, 0, 0, 0 },
  /*83*/ { 0, 0, 0, 0 },
  /*84*/ { ISA_IIX_STY, ISA_AIX_ZPG, 3, 0 },
  /*85*/ { ISA_IIX_STA, ISA_AIX_ZPG, 3, 0 },
  /*86*/ { ISA_IIX_STX, ISA_AIX_ZPG, 3, 0 },
  /*87*/ { 0, 0, 0, 0 },
  /*88*/ { ISA_IIX_DEY, ISA_AIX_IMP, 2, 0 },
  /*89*/ { 0, 0, 0, 0 },
  /*8a*/ { ISA_IIX_TXA, ISA_AIX_IMP, 2, 0 },
  /*8b*/ { 0, 0, 0, 0 },
  /*8c*/ { ISA_IIX_STY, ISA_AIX_ABS, 4, 0 },
  /*8d*/ { ISA_IIX_STA, ISA_AIX_ABS, 4, 0 },
  /*8e*/ { ISA_IIX_STX, ISA_AIX_ABS, 4, 0 },
  /*8f*/ { 0, 0, 0, 0 },
  /*90*/ { ISA_IIX_BCC, ISA_AIX_REL, 2, 2 },
  /*91*/ { ISA_IIX_STA, ISA_AIX_INY, 6, 0 },
  /*92*/ { 0, 0, 0, 0 },
  /*93*/ { 0, 0, 0, 0 },
  /*94*/ { ISA_IIX_STY, ISA_AIX_ZPX, 4, 0 },
  /*95*/ { ISA_IIX_STA, ISA_AIX_ZPX, 4, 0 },
  /*96*/ { ISA_IIX_STX, ISA_AIX_ZPY, 4, 0 },
  /*97*/ { 0, 0, 0, 0 },
  /*98*/ { ISA_IIX_TYA, ISA_AIX_IMP, 2, 0 },
  /*99*/ { ISA_IIX_STA, ISA_AIX_ABY, 5, 0 },
  /*9a*/ { ISA_IIX_TXS, ISA_AIX_IMP, 2, 0 },
  /*9b*/ { 0, 0, 0, 0 },
  /*9c*/ { 0, 0, 0, 0 },
  /*9d*/ { ISA_IIX_STA, ISA_AIX_ABX, 5, 0 },
  /*9e*/ { 0, 0, 0, 0 },
  /*9f*/ { 0, 0, 0, 0 },
  /*a0*/ { ISA_IIX_LDY, ISA_AIX_IMM, 2, 0 },
  /*a1*/ { ISA_IIX_LDA, ISA_AIX_INX, 6, 0 },
  /*a2*/ { ISA_IIX_LDX, ISA_AIX_IMM, 2, 0 },
  /*a3*/ { 0, 0, 0, 0 },
  /*a4*/ { ISA_IIX_LDY, ISA_AIX_ZPG, 3, 0 },
  /*a5*/ { ISA_IIX_LDA, ISA_AIX_ZPG, 3, 0 },
  /*a6*/ { ISA_IIX_LDX, ISA_AIX_ZPG, 3, 0 },
  /*a7*/ { 0, 0, 0, 0 },
  /*a8*/ { ISA_IIX_TAY, ISA_AIX_IMP, 2, 0 },
  /*a9*/ { ISA_IIX_LDA, ISA_AIX_IMM, 2, 0 },
  /*aa*/ { ISA_IIX_TAX, ISA_AIX_IMP, 2, 0 },
  /*ab*/ { 0, 0, 0, 0 },
  /*ac*/ { ISA_IIX_LDY, ISA_AIX_ABS, 4, 0 },
  /*ad*/ { ISA_IIX_LDA, ISA_AIX_ABS, 4, 0 },
  /*ae*/ { ISA_IIX_LDX, ISA_AIX_ABS, 4, 0 },
  /*af*/ { 0, 0, 0, 0 },
  /*b0*/ { ISA_IIX_BCS, ISA_AIX_REL, 2, 2 },
  /*b1*/ { ISA_IIX_LDA, ISA_AIX_INY, 5, 1 },
  /*b2*/ { 0, 0, 0, 0 },
  /*b3*/ { 0, 0, 0, 0 },
  /*b4*/ { ISA_IIX_LDY, ISA_AIX_ZPX, 4, 0 },
  /*b5*/ { ISA_IIX_LDA, ISA_AIX_ZPX, 4, 0 },
  /*b6*/ { ISA_IIX_LDX, ISA_AIX_ZPY, 4, 0 },
  /*b7*/ { 0, 0, 0, 0 },
  /*b8*/ { ISA_IIX_CLV, ISA_AIX_IMP, 2, 0 },
  /*b9*/ { ISA_IIX_LDA, ISA_AIX_ABY, 4, 1 },
  /*ba*/ { ISA_IIX_TSX, ISA_AIX_IMP, 2, 0 },
  /*bb*/ { 0, 0, 0, 0 },
  /*bc*/ { ISA_IIX_LDY, ISA_AIX_ABX, 4, 1 },
  /*bd*/ { ISA_IIX_LDA, ISA_AIX_ABX, 4, 1 },
  /*be*/ { ISA_IIX_LDX, ISA_AIX_ABY, 4, 1 },
  /*bf*/ { 0, 0, 0, 0 },
  /*c0*/ { ISA_IIX_CPY, ISA_AIX_IMM, 2, 0 },
  /*c1*/ { ISA_IIX_CMP, ISA_AIX_INX, 6, 0 },
  /*c2*/ { 0, 0, 0, 0 },
  /*c3*/ { 0, 0, 0, 0 },
  /*c4*/ { ISA_IIX_CPY, ISA_AIX_ZPG, 3, 0 },
  /*c5*/ { ISA_IIX_CMP, ISA_AIX_ZPG, 3, 0 },
  /*c6*/ { ISA_IIX_DEC, ISA_AIX_ZPG, 5, 0 },
  /*c7*/ { 0, 0, 0, 0 },
  /*c8*/ { ISA_IIX_INY, ISA_AIX_IMP, 2, 0 },
  /*c9*/ { ISA_IIX_CMP, ISA_AIX_IMM, 2, 0 },
  /*ca*/ { ISA_IIX_DEX, ISA_AIX_IMP, 2, 0 },
  /*cb*/ { 0, 0, 0, 0 },
  /*cc*/ { ISA_IIX_CPY, ISA_AIX_ABS, 4, 0 },
  /*cd*/ { ISA_IIX_CMP, ISA_AIX_ABS, 4, 0 },
  /*ce*/ { ISA_IIX_DEC, ISA_AIX_ABS, 6, 0 },
  /*cf*/ { 0, 0, 0, 0 },
  /*d0*/ { ISA_IIX_BNE, ISA_AIX_REL, 2, 2 },
  /*d1*/ { ISA_IIX_CMP, ISA_AIX_INY, 5, 1 },
  /*d2*/ { 0, 0, 0, 0 },
  /*d3*/ { 0, 0, 0, 0 },
  /*d4*/ { 0, 0, 0, 0 },
  /*d5*/ { ISA_IIX_CMP, ISA_AIX_ZPX, 4, 0 },
  /*d6*/ { ISA_IIX_DEC, ISA_AIX_ZPX, 6, 0 },
  /*d7*/ { 0, 0, 0, 0 },
  /*d8*/ { ISA_IIX_CLD, ISA_AIX_IMP, 2, 0 },
  /*d9*/ { ISA_IIX_CMP, ISA_AIX_ABY, 4, 1 },
  /*da*/ { 0, 0, 0, 0 },
  /*db*/ { 0, 0, 0, 0 },
  /*dc*/ { 0, 0, 0, 0 },
  /*dd*/ { ISA_IIX_CMP, ISA_AIX_ABX, 4, 1 },
  /*de*/ { ISA_IIX_DEC, ISA_AIX_ABX, 7, 0 },
  /*df*/ { 0, 0, 0, 0 },
  /*e0*/ { ISA_IIX_CPX, ISA_AIX_IMM, 2, 0 },
  /*e1*/ { ISA_IIX_SBC, ISA_AIX_INX, 6, 0 },
  /*e2*/ { 0, 0, 0, 0 },
  /*e3*/ { 0, 0, 0, 0 },
  /*e4*/ { ISA_IIX_CPX, ISA_AIX_ZPG, 3, 0 },
  /*e5*/ { ISA_IIX_SBC, ISA_AIX_ZPG, 3, 0 },
  /*e6*/ { ISA_IIX_INC, ISA_AIX_ZPG, 5, 0 },
  /*e7*/ { 0, 0, 0, 0 },
  /*e8*/ { ISA_IIX_INX, ISA_AIX_IMP, 2, 0 },
  /*e9*/ { ISA_IIX_SBC, ISA_AIX_IMM, 2, 0 },
  /*ea*/ { ISA_IIX_NOP, ISA_AIX_IMP, 2, 0 },
  /*eb*/ { 0, 0, 0, 0 },
  /*ec*/ { ISA_IIX_CPX, ISA_AIX_ABS, 4, 0 },
  /*ed*/ { ISA_IIX_SBC, ISA_AIX_ABS, 4, 0 },
  /*ee*/ { ISA_IIX_INC, ISA_AIX_ABS, 6, 0 },
  /*ef*/ { 0, 0, 0, 0 },
  /*f0*/ { ISA_IIX_BEQ, ISA_AIX_REL, 2, 2 },
  /*f1*/ { ISA_IIX_SBC, ISA_AIX_INY, 5, 1 },
  /*f2*/ { 0, 0, 0, 0 },
  /*f3*/ { 0, 0, 0, 0 },
  /*f4*/ { 0, 0, 0, 0 },
  /*f5*/ { ISA_IIX_SBC, ISA_AIX_ZPX, 4, 0 },
  /*f6*/ { ISA_IIX_INC, ISA_AIX_ZPX, 6, 0 },
  /*f7*/ { 0, 0, 0, 0 },
  /*f8*/ { ISA_IIX_SED, ISA_AIX_IMP, 2, 0 },
  /*f9*/ { ISA_IIX_SBC, ISA_AIX_ABY, 4, 1 },
  /*fa*/ { 0, 0, 0, 0 },
  /*fb*/ { 0, 0, 0, 0 },
  /*fc*/ { 0, 0, 0, 0 },
  /*fd*/ { ISA_IIX_SBC, ISA_AIX_ABX, 4, 1 },
  /*fe*/ { ISA_IIX_INC, ISA_AIX_ABX, 7, 0 },
  /*ff*/ { 0, 0, 0, 0 },
};

uint8_t isa_opcode_iix    ( uint8_t opcode ) { return (uint8_t)pgm_read_byte(&isa_opcodes[opcode].iix    ); }
uint8_t isa_opcode_aix    ( uint8_t opcode ) { return (uint8_t)pgm_read_byte(&isa_opcodes[opcode].aix    ); }
uint8_t isa_opcode_cycles ( uint8_t opcode ) { return (uint8_t)pgm_read_byte(&isa_opcodes[opcode].cycles ); }
uint8_t isa_opcode_xcycles( uint8_t opcode ) { return (uint8_t)pgm_read_byte(&isa_opcodes[opcode].xcycles); }


